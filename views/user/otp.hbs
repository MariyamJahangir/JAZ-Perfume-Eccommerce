<link rel="stylesheet" href="/styles/usersignup.css">
<link rel="stylesheet" href="/styles/otp.css">
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">


{{>header}}

<section>
    <div>
        <p class="text-center fs-2 fw-semibold pt-5">OTP</p>
    </div>

    <div class="signup-container d-flex flex-column align-items-center justify-content-center">

        <form id="otp-form" action="/otp" method="POST">
            
            <div class="text-center">
                <p class="mb-2">An automated mail has been sent to your mail</p>
                <p class="mb-4">Please enter your verification code.</p>
            </div>
            <div class="d-flex otp-container justify-content-center mb-4">
                <input type="text" class="otp-input" name="otp" id="otp" maxlength="4" style="width: 60%; height:50%">
            </div>
            <div class="d-flex otp-container justify-content-center">
                <button type="submit" class="btn btn-primary w-100" style="max-width: 300px;">Verify OTP</button>
            </div>
        </form>

        <div class="w-100 d-flex otp-container justify-content-center m-5 mt-3">
            <button type="button" class="btn btn-primary w-100" style="max-width: 300px;" id="resendOtpButton"
                disabled>Resend OTP in 45 seconds</button>
        </div>

    </div>
</section>


{{>footer}}


<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>

    let resendTimer = 45;
    const resendOtpButton = document.getElementById('resendOtpButton');
    const validateOtpButton = document.getElementById('validateOtpButton');
    const otpInput = document.getElementById('otp'); // Input field for OTP
    let countdownInterval;

    // Start Countdown Timer
    function startCountdown() {
        resendOtpButton.disabled = true;
        countdownInterval = setInterval(function () {
            if (resendTimer > 0) {
                resendOtpButton.textContent = `Resend OTP in ${resendTimer--} seconds`;
            } else {
                resendOtpButton.disabled = false;
                resendOtpButton.textContent = 'Resend OTP';
                clearInterval(countdownInterval);
            }
        }, 1000);
    }

    startCountdown();

   document.getElementById('otp-form').addEventListener('submit', async function (event) {
    event.preventDefault();

    const otp = this.otp.value;

    const submitButton = this.querySelector('button[type="submit"]');
    submitButton.disabled = true;
    submitButton.innerHTML = 'Verifying...';

    try {
        const response = await fetch('/otp', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ otp })
        });

        const result = await response.json();

        submitButton.disabled = false;
        submitButton.innerHTML = 'Verify OTP';

        if (response.ok && result.success) {
            Swal.fire({
                title: 'Success!',
                text: result.message,
                icon: 'success',
                confirmButtonText: 'OK'
            }).then(() => {
                window.location.href = '/login';
            });
        } else {
            Swal.fire({
                title: 'Error!',
                text: result.message,
                icon: 'error',
                confirmButtonText: 'Try Again'
            });
        }
    } catch (error) {
        submitButton.disabled = false;
        submitButton.innerHTML = 'Verify OTP';

        Swal.fire({
            title: 'Error!',
            text: 'Something went wrong. Please try again later.',
            icon: 'error',
            confirmButtonText: 'OK'
        });
    }
});



    // Handle Resend OTP Request
    async function handleResendOtp() {
        resendOtpButton.disabled = true;
        resendOtpButton.textContent = 'Sending OTP...';

        const response = await fetch('/otp/resend', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            }
        });

        const result = await response.json();

        if (result.success) {
            resendTimer = 45;
            startCountdown();
            Swal.fire({
                title: 'Success!',
                text: result.message,
                icon: 'success',
                confirmButtonText: 'OK'
            });
        } else {
            resendOtpButton.disabled = false;
            resendOtpButton.textContent = 'Resend OTP';
            Swal.fire({
                title: 'Error!',
                text: result.message,
                icon: 'error',
                confirmButtonText: 'OK'
            });
        }
    }

    // Validate OTP
    async function validateOtp() {
        const otpValue = otpInput.value.trim();
        if (!otpValue) {
            Swal.fire({
                title: 'Error!',
                text: 'Please enter the OTP.',
                icon: 'error',
                confirmButtonText: 'OK'
            });
            return;
        }

        const response = await fetch('/otp', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ otp: otpValue })
        });

        const result = await response.json();

        if (result.success) {
            Swal.fire({
                title: 'Success!',
                text: result.message,
                icon: 'success',
                confirmButtonText: 'OK'
            });
            clearInterval(countdownInterval); // Stop the timer on successful validation
            resendOtpButton.disabled = true; // Disable resend button as OTP is validated
            resendOtpButton.textContent = 'OTP Verified';
        } else {
            Swal.fire({
                title: 'Error!',
                text: result.message,
                icon: 'error',
                confirmButtonText: 'OK'
            });
            // Timer remains unaffected
        }
    }

    // Check OTP Expiry
    function checkOtpExpiry() {
        let otpExpiryTime = 5 * 60 * 1000; // OTP validity: 5 minutes
        let otpSentTime = Date.parse('{{otpCreatedAt}}'); // Time OTP was sent
        let timeLeft = otpExpiryTime - (Date.now() - otpSentTime);

        if (timeLeft <= 0) {
            resendOtpButton.disabled = false;
            resendOtpButton.textContent = 'Resend OTP';
            Swal.fire('Your OTP has expired. Please request a new OTP.');
        } else {
            startCountdown();
        }
    }

    // Initialize Event Listeners
    checkOtpExpiry();
    resendOtpButton.addEventListener('click', handleResendOtp);
    validateOtpButton.addEventListener('click', validateOtp);


</script>