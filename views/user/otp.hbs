<link rel="stylesheet" href="/styles/usersignup.css">
<link rel="stylesheet" href="/styles/otp.css">
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">


{{>header}}

<section>
    <div>
        <p class="text-center fs-2 fw-semibold pt-5">OTP</p>
    </div>

    <div class="signup-container d-flex flex-column align-items-center justify-content-center">

        {{!-- <form id="otp-form" action="/otp" method="POST"> --}}

            <div class="text-center">
                <p class="mb-2">An automated mail has been sent to your email</p>
                <p class="mb-4">Please enter your verification code.</p>
            </div>
            <div class="d-flex otp-container justify-content-center mb-4">
                <input type="text" class="otp-input" name="otp" id="otp" maxlength="4" style="width: 60%; height:50%">
            </div>
            <p id="message"></p>
            <div class="text-center w-75 otp-container ">
                
                <button type="submit" class="btn btn-primary w-75" id="validateOtpButton">Verify OTP</button>
            </div>
            {{!--
        </form> --}}

        <div class="w-75 d-flex otp-container justify-content-center m-5 mt-3">
            <button type="button" class="btn btn-primary w-75" id="resendOtpButton" disabled></button>
        </div>

    </div>
</section>


{{>footer}}


<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>

    let resendTimer = 120;
    const resendOtpButton = document.getElementById('resendOtpButton');
    const messageElement = document.getElementById('message');
    const validateOtpButton = document.getElementById('validateOtpButton');
    
    let countdownInterval;

    // Start Countdown Timer
    function startCountdown() {
        resendOtpButton.disabled = true;
        countdownInterval = setInterval(function () {

            let minutes = Math.floor(resendTimer / 60);
            let seconds = resendTimer % 60;

            // Format seconds to always be two digits (e.g., 2:09 instead of 2:9)
            let formattedSeconds = seconds < 10 ? `0${seconds}` : seconds;

            resendOtpButton.textContent = `Resend OTP in ${minutes}:${formattedSeconds}`;
            resendTimer--;

            if (resendTimer < 0) {
                clearInterval(countdownInterval);
                resendOtpButton.disabled = false;
                resendOtpButton.textContent = 'Resend OTP';

                // Display OTP expiration message
                messageElement.textContent = "Your OTP has expired. Please request a new OTP.";
                messageElement.style.color = "red"; // Optional: Make the text red
            }
        }, 1000);
    }

    startCountdown();

  
    resendOtpButton.addEventListener('click', async function resendOTP() {
    try {
        resendOtpButton.disabled = true; // Disable button while sending request
        resendOtpButton.textContent = "Resending...";

        const response = await fetch('/resend-otp', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
        });

        const result = await response.json();

        if (result.success) {
            messageElement.textContent = "A new OTP has been sent to your email.";
            messageElement.style.color = "green";

            // Reset and restart the countdown timer
            resendTimer = 120;
            clearInterval(countdownInterval);
            startCountdown();
        } else {
            Swal.fire({
                icon: 'error',
                title: 'Failed!',
                text: 'Failed to resend OTP. Try again later.',
            });
            resendOtpButton.disabled = false;
            resendOtpButton.textContent = "Resend OTP";
        }
    } catch (error) {
        console.error("Error resending OTP:", error);
        Swal.fire({
            icon: 'error',
            title: 'Oops!',
            text: 'An error occurred. Please try again.',
        });
        resendOtpButton.disabled = false;
        resendOtpButton.textContent = "Resend OTP";
    }
});



    // Validate OTP
    validateOtpButton.addEventListener("click", async () => {
        const otp = document.getElementById("otp").value.trim();

        if (!otp) {
            Swal.fire({
                icon: "warning",
                title: "Empty OTP",
                text: "Please enter the OTP.",
            });
            return;
        }
        validateOtpButton.innerHTML = 'Verifying..'
        try {
            const response = await fetch("/verify-otp", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify({ otp }),
            });

            const data = await response.json();

            if (data.success) {
                Swal.fire({
                    icon: "success",
                    title: "OTP Verified!",
                    text: "Redirecting to login...",
                    timer: 2000,
                    showConfirmButton: false,
                    willClose: () => {
                        window.location.href = "/login"; // Redirect after success
                    }
                });
            } else {
                Swal.fire({
                    icon: "error",
                    title: "Verification Failed",
                    text: data.message,
                    willClose: () => {
                        document.getElementById("validateOtpButton").innerHTML = 'Verify OTP'
                    }
                });
            }
        } catch (error) {
            console.error("Error verifying OTP:", error);
            Swal.fire({
                icon: "error",
                title: "Something went wrong!",
                text: "Please try again later.",
                willClose: () => {
                        document.getElementById("validateOtpButton").innerHTML = 'Verify OTP'
                }
            });
        }
    });



</script>