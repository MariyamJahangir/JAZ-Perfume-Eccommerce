{{>header}}
<style>
    .nav-item:hover {
        background-color: #DFF2FA;
        /* Light blue background on hover */
        cursor: pointer;
        /* Add a pointer cursor for better UX */
    }

    .nav-item.active {
        background-color: #DFF2FA;
        /* Fixed light blue background for active */
    }

    .bg-theme {
        background-color: #DFF2FA;
    }
</style>

<section style="background-color: #DFF2FA;">
    <div class="container">
        <div class="row p-5">
            <h2>Welcome {{user.firstname}} {{user.lastname}}</h2>
        </div>

    </div>
</section>
<section>
    <div class="container">
        <div class="row">
            <div class="col-2 mt-5">
                <nav class="d-flex flex-column p-3">
                    <a href="/profile" class="link-dark link-underline-opacity-0 nav-item rounded px-3 py-2 mb-2"><i
                            class="bi bi-person-circle p-2"></i>Profile</a>
                    <a href="/address" class="link-dark link-underline-opacity-0 nav-item rounded px-3 py-2 mb-2"><i
                            class="bi bi-cart4 p-2"></i>Address</a>
                    <a href="/wishlist" class="link-dark link-underline-opacity-0 nav-item rounded px-3 py-2 mb-2"><i
                            class="bi bi-heart p-2"></i>Wishlist</a>
                    <a href="/../orders"
                        class="link-dark link-underline-opacity-0 nav-item rounded px-3 py-2 mb-2 active"
                        aria-current="page"><i class="bi bi-truck p-2"></i>Orders</a>
                    <a href="/change-password"
                        class="link-dark link-underline-opacity-0 nav-item rounded px-3 py-2 mb-2"><i
                            class="bi bi-key p-2"></i>Password</a>
                    <a href="/wallet" class="link-dark link-underline-opacity-0 nav-item rounded px-3 py-2 mb-2"><i
                            class="bi bi-wallet2 p-2"></i>Wallet</a>
                    <a href="/logout" class="link-dark link-underline-opacity-0 nav-item rounded px-3 py-2 mb-2"><i
                            class="bi bi-box-arrow-right p-2"></i>Logout</a>
                </nav>
            </div>


            <div class="col-10">
                <div class="container my-4 p-4 rounded shadow border bg-theme">
                    <h2 class="text-center pb-4 fw-bold">Order Details</h2>
                    <div class="px-2 my-2 d-flex justify-content-between">
                        <div class="d-flex justify-content-between">
                            <span class="me-3"><strong>Order ID:</strong> {{order.orderId}}</span>
                            <span><strong>Ordered On:</strong> {{formatDate order.orderDate}}</span>
                        </div>

                        <div>
                            {{#if (and (isEqual order.payment.method "RAZORPAY") (isEqual order.payment.status "Pending"))}}
                            <button class="btn btn-warning" id="retry-payment-btn" data-order-id="{{order.orderId}}" data-finalamount="{{order.finalAmount}}" data-shippingaddress="{{json order.shippingAddress}}">
                                <i class="bi bi-arrow-repeat me-1"></i> Retry Payment
                            </button>
                            

                            {{else}}
                            <a href="/download-invoice/{{order._id}}" class="btn btn-secondary">
                                <i class="bi bi-download me-1"></i> Download Invoice
                            </a>
                            {{/if}}
                        </div>

                    </div>




                    <!-- Delivery & Payment Info -->
                    <div class="row g-4 mb-4">
                        <div class="col-md-7">
                            <div class="p-4 border rounded-3 h-100 bg-light">
                                <h5 class="fw-bold mb-3">Shipping Address</h5>
                                <p class="mb-1 fw-semibold">{{order.shippingAddress.firstname}}
                                    {{order.shippingAddress.lastname}}</p>
                                <p class="mb-1">Phone: {{order.shippingAddress.phone}}</p>
                                <p class="mb-0">
                                    {{order.shippingAddress.address}}, {{order.shippingAddress.locality}},<br>
                                    {{order.shippingAddress.district}}, {{order.shippingAddress.state}} -
                                    {{order.shippingAddress.pincode}}
                                </p>
                            </div>
                        </div>

                        <div class="col-md-5">
                            <div class="p-4 border rounded-3 h-100 bg-light">

                                <p><strong>Final Amount:</strong> Rs. {{order.finalAmount}}</p>
                                <p><strong>Total Discount:</strong> Rs. {{totalDiscount}}</p>

                                <p><strong>Payment:</strong> {{order.payment.method}} - {{order.payment.status}}</p>
                            </div>
                        </div>
                    </div>

                    {{#each order.items}}
                    <div class="card mb-4 shadow-sm border-0">
                        <div class="row g-0 align-items-center">
                            <!-- Product Image -->
                            <div class="col-md-3 text-center py-3">
                                <a href="/product-details/{{this.productId._id}}/{{this.variantId}}">
                                    <img src="/uploads/{{this.productId.images.[0]}}" alt="{{this.productId.name}}"
                                        class="img-fluid rounded" style="max-width: 70%;">
                                </a>
                            </div>

                            <!-- Product Details -->
                            <div class="col-md-6 py-3">
                                

                                <div class="card border-0 mb-3 p-3 ">
                                    <div class="card-body p-0">

                                        <!-- Product Name & Variant -->
                                        <h5 class="fw-semibold mb-2">
                                            <a href="/product-details/{{this.productId._id}}/{{this.variantId}}"
                                                class="text-decoration-none text-primary">
                                                {{this.productId.name}}
                                            </a>
                                            <span class="text-muted"> - {{getVariantQuantity this.productId.variant
                                                this.variantId}} ML</span>
                                        </h5>

                                        <!-- Quantity -->
                                        <p class="mb-1">
                                            <i class="bi bi-capsule me-1 text-secondary"></i>
                                            Quantity: <strong>{{this.quantityCount}}</strong>
                                        </p>

                                        <!-- Price -->
                                        <p class="mb-1">
                                            <i class="bi bi-currency-rupee me-1 text-success"></i>
                                            Price:
                                            <strong class="text-success">Rs.{{this.discountPrice}}</strong>
                                            <s class="text-muted"><small>Rs.{{this.basePrice}}</small></s>
                                        </p>

                                        <!-- Discount -->
                                        <p class="mb-1">
                                            <i class="bi bi-tag-fill me-1 text-warning"></i>
                                            Discount: <strong
                                                class="text-warning"><small>Rs.{{this.offerDiscount}}</small></strong>
                                        </p>

                                        <!-- Delivered & Return Info -->
                                        {{#if (or (isEqual this.status "Delivered") (isEqual this.status "Returned"))}}
                                        <p class="mb-0 text-muted">
                                            <i class="bi bi-box-seam me-1"></i>Delivered on: <strong>{{formatDate
                                                this.deliveredDate}}</strong>
                                        </p>
                                        <p class="mb-0 text-info">
                                            <i class="bi bi-arrow-counterclockwise me-1"></i>
                                            <small>Return valid only before 10 days of delivery</small>
                                        </p>
                                        {{/if}}

                                    </div>
                                </div>

                            </div>

                            <!-- Status & Actions -->
                            <div class="col-md-2 py-3 text-center">
                                <div class="mb-2">
                                    {{#if (isEqual this.status "Pending")}}
                                    <span class="badge bg-primary px-3 py-2">Pending</span>
                                    {{else if (isEqual this.status "Delivered")}}
                                    <span class="badge bg-success px-3 py-2">Delivered</span>
                                    {{else if (isEqual this.status "Returned")}}
                                    <span class="badge bg-secondary px-3 py-2">Returned</span>
                                    {{else if (isEqual this.status "Shipped")}}
                                    <span class="badge bg-info text-dark px-3 py-2">Shipped</span>
                                    {{else if (isEqual this.status "Cancelled")}}
                                    <span class="badge bg-danger px-3 py-2">Cancelled</span>
                                    {{else}}
                                    <span class="badge bg-warning text-dark px-3 py-2">{{this.status}}</span>
                                    {{/if}}
                                </div>

                                <div class="d-grid gap-2">
                                    {{#if (isEqual this.status "Delivered")}}
                                    <!-- Return Button -->
                                    <button type="button" class="btn btn-outline-primary return-btn"
                                        data-action="return" data-order-id="{{../order._id}}"
                                        data-product-id="{{this.productId._id}}" data-status="{{this.status}}" {{#if
                                        (isReturnEligible this.deliveredDate)}}disabled{{/if}}>
                                        Return
                                    </button>
                                    {{else}}
                                    <!-- Cancel Button -->
                                    <button type="button" class="btn btn-outline-danger cancel-btn" data-action="cancel"
                                        data-order-id="{{../order._id}}" data-product-id="{{this.productId._id}}"
                                        data-variant-id="{{this.variantId}}" data-status="{{this.status}}" {{#if (or (or
                                        (isEqual this.status "Cancelled" ) (isEqual this.status "Returned" )) (isEqual
                                        this.status "Return Approved" ))}}hidden{{/if}}>
                                        Cancel
                                    </button>
                                    {{/if}}

                                    {{#if (isReturnEligible this.deliveredDate)}}
                                    <button type="button" class="btn btn-outline-secondary">Rate this Product</button>
                                    {{/if}}
                                </div>
                            </div>
                        </div>
                    </div>
                    {{/each}}


                </div>
            </div>


        </div>
    </div>
</section>

<!-- Return Reason Modal -->
<div class="modal fade" id="returnModal" tabindex="-1" aria-labelledby="returnModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="returnModalLabel">Select Return Reason</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="returnForm">
                    <input type="hidden" id="returnOrderId">
                    <input type="hidden" id="returnProductId">

                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="returnReason" value="Defective product"
                            id="reason1">
                        <label class="form-check-label" for="reason1">Defective product</label>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="returnReason" value="Received wrong item"
                            id="reason2">
                        <label class="form-check-label" for="reason2">Received wrong item</label>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="returnReason" value="Not as described"
                            id="reason3">
                        <label class="form-check-label" for="reason3">Not as described</label>
                    </div>

                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        <button type="submit" class="btn btn-danger">Confirm Return</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>


<!-- Cancel Reason Modal -->
<div class="modal fade" id="cancelModal" tabindex="-1" aria-labelledby="cancelModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="cancelModalLabel">Select Cancellation Reason</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="cancelForm" method="POST">
                    <input type="hidden" name="orderId" id="orderId">
                    <input type="hidden" name="productId" id="productId">
                    <input type="hidden" name="variantId" id="variantId">

                    <div>
                        <label><input type="radio" name="cancelReason" value="Order by mistake"> Order by mistake
                        </label><br>
                        <label><input type="radio" name="cancelReason" value="Found a better price"> Found a better
                            price </label><br>
                        <label><input type="radio" name="cancelReason" value="Delivery taking too long"> Delivery taking
                            too long </label><br>

                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="submit" form="cancelForm" class="btn btn-danger">Confirm Cancellation</button>
            </div>
        </div>
    </div>
</div>



{{>footer}}

<script src="https://checkout.razorpay.com/v1/checkout.js"></script>


<!-- JavaScript for Confirmation -->
<script>
    document.addEventListener("DOMContentLoaded", () => {
        document.body.addEventListener("click", async function (event) {
            const target = event.target;

            console.log("Clicked element:", target); // Debugging log

            if (target.classList.contains("return-btn") || target.classList.contains("cancel-btn")) {
                const action = target.getAttribute("data-action");
                const orderId = target.getAttribute("data-order-id");
                const productId = target.getAttribute("data-product-id");
                const variantId = target.getAttribute("data-variant-id");  // Capture the variant-id for cancel

                console.log("Action:", action);
                console.log("Order ID:", orderId);
                console.log("Product ID:", productId);
                console.log("Variant ID:", variantId);

                if (action === "return") {
                    document.getElementById("returnOrderId").value = orderId;
                    document.getElementById("returnProductId").value = productId;
                    const returnModal = new bootstrap.Modal(document.getElementById("returnModal"));
                    returnModal.show();
                } else if (action === "cancel") {
                    document.getElementById("orderId").value = orderId;
                    document.getElementById("productId").value = productId;
                    document.getElementById("variantId").value = variantId;  // Set variant-id for cancel

                    console.log("Opening Cancel Modal..."); // Debugging log

                    const cancelModal = new bootstrap.Modal(document.getElementById("cancelModal"));
                    cancelModal.show();
                }
            }
        });

        // Handle Return Submission
        document.getElementById("returnForm").addEventListener("submit", async function (event) {
            event.preventDefault();

            const returnModal = bootstrap.Modal.getInstance(document.getElementById("returnModal"));
            returnModal.hide(); // Close the modal first

            setTimeout(async () => {
                const orderId = document.getElementById("returnOrderId").value;
                const productId = document.getElementById("returnProductId").value;
                const reason = document.querySelector('input[name="returnReason"]:checked');
                if (!reason) {
                    await Swal.fire("Error", "Please select a return reason!", "error");
                    return;
                }

                await submitAction({ action: "return", orderId, productId, returnReason: reason.value });
            }, 300); // Small delay to ensure smooth UI transition
        });

        // Handle Cancel Submission
        document.getElementById("cancelForm").addEventListener("submit", async function (event) {
            event.preventDefault();

            const cancelModal = bootstrap.Modal.getInstance(document.getElementById("cancelModal"));
            cancelModal.hide(); // Close the modal first

            setTimeout(async () => {
                const orderId = document.getElementById("orderId").value;
                const productId = document.getElementById("productId").value;
                const variantId = document.getElementById("variantId").value;  // Get the variant-id from hidden input
                const reason = document.querySelector('input[name="cancelReason"]:checked');

                if (!reason) {
                    await Swal.fire("Error", "Please select a cancellation reason!", "error");
                    return;
                }

                await submitAction({ action: "cancel", orderId, productId, variantId, cancelReason: reason.value });
            }, 300); // Small delay for smooth transition
        });

        async function submitAction(payload) {
            const endpoint = payload.action === "return"
                ? `/order/return/${payload.orderId}/${payload.productId}`
                : `/order/cancel/${payload.orderId}/${payload.productId}/${payload.variantId}`;  // Include variantId for cancel

            try {
                const response = await fetch(endpoint, {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify(payload),
                });

                const data = await response.json();

                if (data.success) {
                    await Swal.fire("Success", data.message, "success");
                    location.reload(); // Refresh the page to update UI
                } else {
                    await Swal.fire("Error", data.message, "error");
                }
            } catch (error) {
                console.error("Error:", error);
                await Swal.fire("Error", "An unexpected error occurred.", "error");
            }
        }


        const retryButton = document.getElementById('retry-payment-btn');

        retryButton.addEventListener("click", async function (event) {

            const orderId = retryButton.dataset.orderId;
            const finalAmount = retryButton.dataset.finalamount;
            const shippingAddress = JSON.parse(retryButton.dataset.shippingaddress);

            console.log("orderId:",orderId)
            console.log("finalAmount:",finalAmount)
            try {
                const response = await fetch("/create-payment", {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({ total: finalAmount })
                });

                const data = await response.json();

                if (data.success) {
                    console.log("data.order:", data.order)
                    // Step 2: Now initiate Razorpay payment
                    initiateRazorpayPayment(data.order, shippingAddress, orderId);
                } else {
                    Swal.fire({ icon: "error", title: "Payment Error", text: "Failed to create Razorpay order." });
                }
            } catch (error) {
                console.error("Error creating Razorpay order:", error);
                Swal.fire({ icon: "error", title: "Payment Error", text: "Error while initiating payment." });
            }

            async function initiateRazorpayPayment(order, shippingAddress, orderId) {
                const options = {
                    key: order.key,
                    amount: order.amount,
                    currency: "INR",
                    name: "JAZ Perfumes",
                    description: "Payment for Order",
                    order_id: order.id,
                    handler: async function (response) {
                        try {
                            const verifyResponse = await fetch("/verify-payment", {
                                method: "POST",
                                headers: { "Content-Type": "application/json" },
                                body: JSON.stringify({
                                    razorpay_order_id: order.id,
                                    razorpay_payment_id: response.razorpay_payment_id,
                                    razorpay_signature: response.razorpay_signature,
                                    orderId: orderId
                                })
                            });

                            const verifyData = await verifyResponse.json();

                            if (verifyData.success) {
                                Swal.fire({ icon: "success", title: "Payment Successful", text: "Order placed successfully!" })
                                    .then(() => window.location.href = "/order-placed");
                            } else {
                                Swal.fire({ icon: "error", title: "Payment Failed", text: "Verification failed." });
                            }
                        } catch (error) {
                            console.error("Error verifying payment:", error);
                            Swal.fire({ icon: "error", title: "Payment Error", text: "Verification or order failed." });
                        }
                    },
                    prefill: {
                        name: `${shippingAddress.firstname} ${shippingAddress.lastname}`,
                        contact: shippingAddress.phone
                    },
                    theme: { color: "#3399cc" }
                };

                const rzp1 = new Razorpay(options);
                rzp1.open();

                rzp1.on('payment.failed', function (response) {
                    console.log("Payment Failed:", response.error);
                    Swal.fire({
                        icon: "error",
                        title: "Payment Failed",
                        text: `${response.error.description}`,
                        confirmButtonText: "OK",
                        confirmButtonColor: "#d33",
                        allowOutsideClick: false,
                        allowEscapeKey: false
                    }).then((result) => {
                        if (result.isConfirmed) {
                            window.location.href = "/order-failed";
                        }
                    });
                });
            }
        })


    });


</script>
