<link rel="stylesheet" href="/styles/products.css">
<script src="https://cdnjs.cloudflare.com/ajax/libs/handlebars.js/4.7.7/handlebars.min.js"></script>



<style>
    .searchinput .input-group-text,
    .searchinput .form-control {
        box-shadow: none !important;
        border-color: #ced4da !important;
        /* Default border color */
        outline: none !important;
    }

    .searchinput:focus-within {
        border-color: inherit !important;
        box-shadow: none !important;
    }

    .dropdown-item {
        cursor: pointer;
    }
</style>

{{>header}}

<section>
    <div class="container">
        <div class="row">
            <div class="col-12">
                <div class="container mt-5 text-center">
                    <h1 class="pb-3">All Products</h1>
                    <nav style="--bs-breadcrumb-divider: '>';" aria-label="breadcrumb"
                        class="d-flex justify-content-center">
                        <ol class="breadcrumb" style="font-size: smaller;">
                            <li class="breadcrumb-item"><a href="/" class="link-dark">Home</a></li>
                            <li class="breadcrumb-item active" aria-current="page">All Products</li>
                        </ol>
                    </nav>
                    <div class="row pt-3">
                        <div class="d-flex flex-wrap gap-2 justify-content-center">


                            <!-- Price Filter -->
                            <div class="dropdown">
                                <button class="btn btn-outline-secondary btn-sm dropdown-toggle" type="button"
                                    data-bs-toggle="dropdown" aria-expanded="false">
                                    Price
                                </button>
                                <ul class="dropdown-menu p-3" style="min-width: 270px;">
                                    <li>
                                        <div class="price-input">
                                            <div class="field">
                                                <span>Min</span>
                                                <input type="number" class="input-min" value="0" id="min-price">
                                            </div>
                                            <div class="separator">-</div>
                                            <div class="field">
                                                <span>Max</span>
                                                <input type="number" class="input-max" value="10000" id="max-price">
                                            </div>
                                        </div>
                                        <div class="slider">
                                            <div class="progress"></div>
                                        </div>
                                        <div class="range-input">
                                            <input type="range" class="range-min" min="0" max="10000" value="0"
                                                step="100">
                                            <input type="range" class="range-max" min="0" max="10000" value="10000"
                                                step="100">
                                        </div>
                                    </li>
                                </ul>
                            </div>

                            <!-- Search Input -->
                            <form class="d-flex w-50" id="search-form">
                                <div class="input-group searchinput" style="height: 80%;">
                                    <span class="input-group-text bg-white border-end-0  h-100">
                                        <i class="bi bi-search" id="search-button"></i>
                                    </span>
                                    <input class="form-control border-start-0 h-100" id="search-input" type="search"
                                        placeholder="Search products.." aria-label="Search">
                                </div>
                            </form>

                            <!-- Category Filter -->
                            <div class="dropdown">
                                <button class="btn btn-outline-secondary btn-sm dropdown-toggle" type="button"
                                    data-bs-toggle="dropdown" aria-expanded="false">
                                    Categories
                                </button>
                                <ul class="dropdown-menu" id="category-filter">
                                    {{#each categories}}
                                    {{#if (isEqual deleted false)}}
                                    <li><label class="dropdown-item">
                                            <input type="checkbox" value="{{name}}" class="category-checkbox"> {{name}}
                                        </label></li>
                                    {{/if}}
                                    {{/each}}
                                </ul>
                            </div>


                            <!-- Sort By Filter -->
                            <div class="dropdown">
                                <button id="sort-button" class="btn btn-outline-secondary btn-sm dropdown-toggle"
                                    type="button" data-bs-toggle="dropdown" aria-expanded="false">
                                    Sort By: <span id="selected-sort">Select</span>
                                </button>
                                <ul class="dropdown-menu" id="sort-options">
                                    <li><button class="dropdown-item" type="button" data-sort="priceLowToHigh">Price:
                                            Low to High</button></li>
                                    <li><button class="dropdown-item" type="button" data-sort="priceHighToLow">Price:
                                            High to Low</button></li>
                                    <li><button class="dropdown-item" type="button" data-sort="newArrivals">New
                                            Arrivals</button></li>
                                    <li><button class="dropdown-item" type="button" data-sort="aToZ">A - Z</button></li>
                                    <li><button class="dropdown-item" type="button" data-sort="zToA">Z - A</button></li>
                                </ul>
                            </div>

                        </div>
                    </div>
                    <hr>
                </div>

                <div class="container py-5">
                    <div class="row text-center d-flex justify-content-around" id="products-container">

                    </div>
                </div>

                <nav aria-label="Page navigation" class="d-flex justify-content-center m-2">
                    <ul class="pagination" id="pagination">

                    </ul>
                </nav>

            </div>
        </div>
    </div>
</section>


{{>footer}}



<script id="products-data" type="application/json">
  {{{json products}}}
</script>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        const rangeInput = document.querySelectorAll(".range-input input"),
            priceInput = document.querySelectorAll(".price-input input"),
            range = document.querySelector(".slider .progress");
        let priceGap = 1000;

        // Function to filter products based on price range
        function filterProductsByPrice(minPrice, maxPrice) {
            const products = document.querySelectorAll('.product-card');
            products.forEach(product => {
                const productPrice = parseFloat(product.getAttribute('data-price'));
                if (productPrice >= minPrice && productPrice <= maxPrice) {
                    product.style.display = 'block';
                } else {
                    product.style.display = 'none';
                }
            });
        }


        // Event listeners for price input fields
        priceInput.forEach((input) => {
            input.addEventListener("input", (e) => {
                let minPrice = parseInt(priceInput[0].value),
                    maxPrice = parseInt(priceInput[1].value);

                if (maxPrice - minPrice >= priceGap && maxPrice <= rangeInput[1].max) {
                    if (e.target.className === "input-min") {
                        rangeInput[0].value = minPrice;
                        range.style.left = (minPrice / rangeInput[0].max) * 100 + "%";
                    } else {
                        rangeInput[1].value = maxPrice;
                        range.style.right = 100 - (maxPrice / rangeInput[1].max) * 100 + "%";
                    }
                    filterProductsByPrice(minPrice, maxPrice);
                }
            });
        });

        // Event listeners for range slider inputs
        rangeInput.forEach((input) => {
            input.addEventListener("input", (e) => {
                let minVal = parseInt(rangeInput[0].value),
                    maxVal = parseInt(rangeInput[1].value);

                if (maxVal - minVal < priceGap) {
                    if (e.target.className === "range-min") {
                        rangeInput[0].value = maxVal - priceGap;
                    } else {
                        rangeInput[1].value = minVal + priceGap;
                    }
                } else {
                    priceInput[0].value = minVal;
                    priceInput[1].value = maxVal;
                    range.style.left = (minVal / rangeInput[0].max) * 100 + "%";
                    range.style.right = 100 - (maxVal / rangeInput[1].max) * 100 + "%";
                    filterProductsByPrice(minVal, maxVal);
                }
            });
        });

        // Initial filter on page load
        const initialMinPrice = parseInt(priceInput[0].value);
        const initialMaxPrice = parseInt(priceInput[1].value);
        filterProductsByPrice(initialMinPrice, initialMaxPrice);
    });
</script>




<script>
    document.addEventListener('DOMContentLoaded', function () {
        const searchInput = document.getElementById('search-input');
        const productsContainer = document.getElementById('products-container');
        const categoryCheckboxes = document.querySelectorAll('.category-checkbox');
        const sortOptions = document.getElementById('sort-options');
        const selectedSortSpan = document.getElementById('selected-sort');
        const paginationContainer = document.getElementById('pagination');

        const productsDataElement = document.getElementById('products-data');
        const products = JSON.parse(productsDataElement.textContent);

        let currentSort = '';
        let currentPage = 1;
        const productsPerPage = 10;

        function displayProducts(filteredProducts, page = 1) {
            productsContainer.innerHTML = '';

            if (filteredProducts.length === 0) {
                productsContainer.innerHTML = '<p>No products found.</p>';
                paginationContainer.innerHTML = '';
                return;
            }

            const start = (page - 1) * productsPerPage;
            const end = start + productsPerPage;
            const paginatedProducts = filteredProducts.slice(start, end);

            paginatedProducts.forEach(product => {
                productsContainer.innerHTML += `
            <div class="col-md-2 m-3 product-card" data-price="${product.price}">
                <div class="card text-center">
                    <a href="/product-details/${product.productId}/${product._id}">
                        <img src="/uploads/${product.images[0]}" class="card-img-top" alt="Product Image"
                            style="width: 100%; height: 240px; object-fit: cover;">
                    </a>
                    <button type="button" class="btn-hover btncartbtm addtocart" data-productid="${product.productId}" data-variantid="${product._id}" data-stockstatus="${product.stockStatus}" data-stockquantity="${product.stockQuantity}" data-price="${product.price}" >Add to Cart</button>
                </div>
                <div class="card-body px-0">
                    <h6 class="card-title pt-2">${product.productName} - ${product.quantityML} ML</h6>
                    <div class="d-flex justify-content-between align-items-center pe-4">
                        <button type="button" class="btn btn-outline-secondary rounded-pill py-0 my-2 btnpill">${product.stockStatus}</button>
                        <p class="card-text text-muted">Rs. ${product.price}</p>
                    </div>
                    <p class="card-text text-muted">${product.category.name}</p>
                </div>
            </div>`;
            });

            setupPagination(filteredProducts);
        }

        function setupPagination(filteredProducts) {
            paginationContainer.innerHTML = '';
            const totalPages = Math.ceil(filteredProducts.length / productsPerPage);

            if (totalPages <= 1) return;

            let paginationHTML = '';

            if (currentPage > 1) {
                paginationHTML += `<li class="page-item"><button class="pagination-btn page-link" data-page="${currentPage - 1}">&laquo;</button></li>`;
            }

            for (let i = 1; i <= totalPages; i++) {
                paginationHTML += `<li class="page-item"><button class="pagination-btn page-link ${i === currentPage ? 'active' : ''}" data-page="${i}">${i}</button></li>`;
            }

            if (currentPage < totalPages) {
                paginationHTML += `<li class="page-item"><button class="pagination-btn page-link" data-page="${currentPage + 1}">&raquo;</button></li>`;
            }

            paginationContainer.innerHTML = paginationHTML;

            document.querySelectorAll('.pagination-btn').forEach(button => {
                button.addEventListener('click', function () {
                    currentPage = parseInt(this.getAttribute('data-page'));
                    filterProducts();
                });
            });
        }

        function filterProducts() {
            const query = searchInput.value.toLowerCase();
            const selectedCategories = Array.from(categoryCheckboxes)
                .filter(checkbox => checkbox.checked)
                .map(checkbox => checkbox.value);

            let filteredProducts = products.filter(product => {
                const matchesSearch = product.productName.toLowerCase().includes(query);
                const matchesCategory = selectedCategories.length === 0 || selectedCategories.includes(product.category.name);
                return matchesSearch && matchesCategory;
            });

            filteredProducts = sortProducts(filteredProducts, currentSort);
            displayProducts(filteredProducts, currentPage);
        }

        function sortProducts(productsArray, sortOption) {
            const sortedProducts = [...productsArray];

            switch (sortOption) {
                case 'priceLowToHigh':
                    sortedProducts.sort((a, b) => a.price - b.price);
                    break;
                case 'priceHighToLow':
                    sortedProducts.sort((a, b) => b.price - a.price);
                    break;
                case 'newArrivals':
                    sortedProducts.sort((a, b) => new Date(b.arrivalDate) - new Date(a.arrivalDate));
                    break;
                case 'aToZ':
                    sortedProducts.sort((a, b) => a.productName.localeCompare(b.productName));
                    break;
                case 'zToA':
                    sortedProducts.sort((a, b) => b.productName.localeCompare(a.productName));
                    break;
            }

            return sortedProducts;
        }

        searchInput.addEventListener('input', () => {
            currentPage = 1;
            filterProducts();
        });

        categoryCheckboxes.forEach(checkbox => {
            checkbox.addEventListener('change', () => {
                currentPage = 1;
                filterProducts();
            });
        });

        sortOptions.addEventListener('click', function (event) {
            const sortOption = event.target.getAttribute('data-sort');
            const sortText = event.target.textContent.trim();
            if (sortOption) {
                currentSort = sortOption;
                selectedSortSpan.textContent = sortText;
                currentPage = 1;
                filterProducts();
            }
        });

        displayProducts(products);
    });


</script>



<script>
    document.addEventListener("DOMContentLoaded", function () {
        document.getElementById("products-container").addEventListener("click", async function (event) {
            
                const button = event.target.closest(".addtocart");
                if (!button) return; // Ignore clicks outside the button

                const productId = button.dataset.productid;
                const variantId = button.dataset.variantid;

                const stockStatus = button.dataset.stockstatus;
                const stockQuantity = button.dataset.stockquantity;

                const basePrice = button.dataset.price;
                const quantityCount = 1;

                if (!variantId) {
                    Swal.fire({
                        icon: 'warning',
                        title: 'Variant Required',
                        text: 'Please select a variant before adding to cart.',
                        confirmButtonText: 'OK',
                        confirmButtonColor: '#f39c12'
                    });
                    return;
                }

                // ✅ Prevent adding if "Out of Stock"
                if (stockStatus.toLowerCase() === "out of stock" || stockQuantity <= 0) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Out of Stock',
                        text: 'This product is currently out of stock and cannot be added to the cart.',
                        confirmButtonText: 'OK',
                        confirmButtonColor: '#d33'
                    });
                    return;
                }



                try {
                    const response = await fetch("/cart/add", {
                        method: "POST",
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify({
                            productId,
                            variantId,
                            quantityCount,
                            totalPrice: (basePrice * quantityCount)
                        }),
                    });


                    const contentType = response.headers.get("content-type");
                    if (contentType && contentType.includes("application/json")) {

                        const data = await response.json();

                        if (data.success) {
                            Swal.fire({
                                icon: 'success',
                                title: 'Success!',
                                text: data.message,
                                confirmButtonText: 'Great!',
                                confirmButtonColor: '#28a745'
                            });
                            //window.location.href = "/cart"; // Redirect to cart page
                        } else if (response.status === 401) {
                            Swal.fire({
                                icon: 'warning',
                                title: 'You need to log in!',
                                text: data.message,
                                confirmButtonColor: '#d33'
                            });
                            window.location.href = "/login";
                        } else {
                            Swal.fire({
                                icon: 'error',
                                title: 'Oops!',
                                text: data.message || 'Failed to add product to cart.',
                                confirmButtonColor: '#d33'
                            });
                        }


                    } else {
                        // Handle HTML response (unauthenticated)
                        await Swal.fire({
                            icon: 'warning',
                            title: 'Authentication Required',
                            text: 'You need to log in to add products to the cart.',
                            confirmButtonColor: '#d33'
                        });
                        window.location.href = "/login";
                    }

                } catch (error) {
                    console.error("Error:", error);
                    Swal.fire({
                        icon: 'error',
                        title: 'Server Error',
                        text: error.message || 'Something went wrong. Please try again later.',
                        confirmButtonColor: '#d33'
                    });
                }
            
        });
    });

</script>