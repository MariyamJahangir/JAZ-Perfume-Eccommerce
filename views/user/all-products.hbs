<link rel="stylesheet" href="/styles/products.css">

<style>
    


.search-input .input-group-text,
.search-input .form-control {
    box-shadow: none !important;
    border-color: #ced4da !important; /* Default border color */
    outline: none !important;
}

.search-input:focus-within {
    border-color: inherit !important; 
    box-shadow: none !important;
}





</style>

{{>header}}

<section>
    <div class="container">
        <div class="row">
            <div class="col-12">
                <div class="container mt-5 text-center">
                    <h1 class="pb-3">All Products</h1>
                    <nav style="--bs-breadcrumb-divider: '>';" aria-label="breadcrumb"
                        class="d-flex justify-content-center">
                        <ol class="breadcrumb" style="font-size: smaller;">
                            <li class="breadcrumb-item"><a href="/" class="link-dark">Home</a></li>
                            <li class="breadcrumb-item active" aria-current="page">All Products</li>
                        </ol>
                    </nav>
                    <div class="row pt-3">
                        <div class="d-flex flex-wrap gap-2 justify-content-center">

                            {{!-- <div class="dropdown">
                                <button class="btn btn-outline-secondary btn-sm dropdown-toggle" type="button"
                                    data-bs-toggle="dropdown" aria-expanded="false">
                                    Price
                                </button>
                                <ul class="dropdown-menu p-3" style="min-width: 270px;">
                                    <li>
                                        <div class="price-input">
                                            <div class="field">
                                                <span>Min</span>
                                                <input type="number" class="input-min" value="0">
                                            </div>
                                            <div class="separator">-</div>
                                            <div class="field">
                                                <span>Max</span>
                                                <input type="number" class="input-max" value="10000">
                                            </div>
                                        </div>
                                        <div class="slider">
                                            <div class="progress"></div>
                                        </div>
                                        <div class="range-input">
                                            <input type="range" class="range-min" min="0" max="10000" value="0"
                                                step="100">
                                            <input type="range" class="range-max" min="0" max="10000" value="10000"
                                                step="100">
                                        </div>
                                    </li>
                                </ul>
                            </div> --}}


                            {{!-- <form class="d-flex w-50">
                                <div class="input-group search-input" style="height: 80%;">
                                    <span class="input-group-text bg-white border-end-0  h-100">
                                        <i class="bi bi-search" id="search-button"></i>
                                    </span>
                                    <input class="form-control border-start-0 h-100" id="search-input" type="search" placeholder="Search"
                                        aria-label="Search">
                                </div>
                            </form>

                            <div class="dropdown">
                                <button class="btn btn-outline-secondary btn-sm dropdown-toggle" type="button"
                                    data-bs-toggle="dropdown" aria-expanded="false">
                                    Categories
                                </button>
                                <ul class="dropdown-menu" id="category-filter">
                                    {{#each categories}}
                                    <li><label class="dropdown-item">
                                            <input type="checkbox" value="{{name}}" class="category-checkbox"> {{name}}
                                        </label></li>
                                    {{/each}}
                                </ul>
                            </div>

                            <div class="dropdown">
                                <button class="btn btn-outline-secondary btn-sm dropdown-toggle" type="button"
                                    data-bs-toggle="dropdown" aria-expanded="false">
                                    Sort By:
                                </button>
                                <ul class="dropdown-menu">
                                    <li><a class="dropdown-item" href="/list-products?sort=popularity">Popularity</a></li>
                                    <li><a class="dropdown-item" href="/list-products?sort=priceLowToHigh">Price: Low to High</a></li>
                                    <li><a class="dropdown-item" href="/list-products?sort=priceHighToLow">Price: High to Low</a></li>
                                    <li><a class="dropdown-item" href="/list-products?sort=averageRatings">Average Ratings</a></li>
                                    <li><a class="dropdown-item" href="/list-products?sort=featured">Featured</a></li>
                                    <li><a class="dropdown-item" href="/list-products?sort=newArrivals">New Arrivals</a></li>
                                    <li><a class="dropdown-item" href="/list-products?sort=aToZ">A - Z</a></li>
                                    <li><a class="dropdown-item" href="/list-products?sort=zToA">Z - A</a></li>
                                </ul>
                            </div> --}}

<div class="search-container text-center" style="margin-top: 2%;">
  <input 
    type="text" 
    id="search-input" 
    placeholder="Search for products..." 
    style="padding: 10px; width: 40%; border: 1px solid #ccc; border-radius: 5px;">
  
  <select 
    id="category-filter" 
    style="padding: 10px; border: 1px solid #ccc; border-radius: 5px;">
    <option value="">All Categories</option>
    {{#each categories}}
      <option value="{{this._id}}">{{this.name}}</option>
    {{/each}}
  </select>
  
  <button 
    id="search-button" 
    style="padding: 10px 20px; background-color: #000; color: #fff; border: none; border-radius: 5px;">
    Search
  </button>
  <div class="btn-group">
    <button type="button" class="btn btn-danger dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
      Sort By
    </button>
    <ul class="dropdown-menu">
      <li><a class="dropdown-item" href="/all-products?sort=popularity">Popularity</a></li>
      <li><a class="dropdown-item" href="/all-products?sort=priceLowToHigh">Price: low to high</a></li>
      <li><a class="dropdown-item" href="/all-products?sort=priceHighToLow">Price: high to low</a></li>
      <li><a class="dropdown-item" href="/all-products?sort=averageRatings">Average ratings</a></li>
      <li><a class="dropdown-item" href="/all-products?sort=featured">Featured</a></li>
      <li><a class="dropdown-item" href="/all-products?sort=newArrivals">New arrivals</a></li>
      <li><a class="dropdown-item" href="/all-products?sort=aToZ">aA - zZ</a></li>
      <li><a class="dropdown-item" href="/all-products?sort=zToA">zZ - aA</a></li>
    </ul>
  </div>
</div>

                        </div>
                    </div>
                    <hr>
                </div>

<div class="sortdiv" style="margin-left:47%; margin-top:3%">
  
</div>

                <div class="container py-5">
                    <div class="row text-center d-flex justify-content-around" id="products-container">
                        {{!-- <!-- Product Card -->
                        {{#each products}}
                        {{#if (isEqual deleted false)}}
                        {{#each variant}} <!-- Loop through each variant -->
                        <div class="col-md-2 m-3">
                            <div class="card text-center">
                                <a href="/product-details/{{../_id}}">
                                    <img src="/uploads/{{../images.[0]}}" class="card-img-top" alt="Product Image"
                                        style="width: 100%; height: 230px; object-fit: cover;">
                                </a>
                                <button type="button" class="btn-hover btncartbtm">Add to Cart</button>
                            </div>
                            <div class="card-body px-0">
                                <h6 class="card-title pt-2">{{../name}} - {{quantityML}} ML</h6>
                                <!-- Product Name + Variant -->
                                <div class="d-flex justify-content-between align-items-center pe-4">
                                    <button type="button"
                                        class="btn btn-outline-secondary rounded-pill py-0 my-2 btnpill">{{stockStatus}}</button>
                                    <p class="card-text text-muted">Rs. {{price}}</p> <!-- Variant Price -->
                                </div>
                            </div>
                        </div>
                        {{/each}}
                        {{/if}}
                        {{/each}} --}}

                    </div>

                </div>


            </div>



        </div>
    </div>
</section>

<nav aria-label="Page navigation" class="d-flex justify-content-end mt-4">
  <ul class="pagination" id="pagination-controls">
    <li class="page-item" id="prev-btn">
      <a class="page-link" href="#" aria-label="Previous">
        <span aria-hidden="true">&laquo;</span>
      </a>
    </li>

    <li class="page-item" id="next-btn">
      <a class="page-link" href="#" aria-label="Next">
        <span aria-hidden="true">&raquo;</span>
      </a>
    </li>
  </ul>
</nav>

{{>footer}}

{{!-- <script>

    const rangeInput = document.querySelectorAll(".range-input input"),
        priceInput = document.querySelectorAll(".price-input input"),
        range = document.querySelector(".slider .progress");
    let priceGap = 1000;

    priceInput.forEach((input) => {
        input.addEventListener("input", (e) => {
            let minPrice = parseInt(priceInput[0].value),
                maxPrice = parseInt(priceInput[1].value);

            if (maxPrice - minPrice >= priceGap && maxPrice <= rangeInput[1].max) {
                if (e.target.className === "input-min") {
                    rangeInput[0].value = minPrice;
                    range.style.left = (minPrice / rangeInput[0].max) * 100 + "%";
                } else {
                    rangeInput[1].value = maxPrice;
                    range.style.right = 100 - (maxPrice / rangeInput[1].max) * 100 + "%";
                }
            }
        });
    });

    rangeInput.forEach((input) => {
        input.addEventListener("input", (e) => {
            let minVal = parseInt(rangeInput[0].value),
                maxVal = parseInt(rangeInput[1].value);

            if (maxVal - minVal < priceGap) {
                if (e.target.className === "range-min") {
                    rangeInput[0].value = maxVal - priceGap;
                } else {
                    rangeInput[1].value = minVal + priceGap;
                }
            } else {
                priceInput[0].value = minVal;
                priceInput[1].value = maxVal;
                range.style.left = (minVal / rangeInput[0].max) * 100 + "%";
                range.style.right = 100 - (maxVal / rangeInput[1].max) * 100 + "%";
            }
        });
    });

</script> --}}


<script id="products-data" type="application/json">
  {{{allProducts}}}
</script>

<script>
  document.addEventListener("DOMContentLoaded", function () {
    const products = document.querySelectorAll(".product-item");
    const productsPerPage = 20;
    const totalPages = Math.ceil(products.length / productsPerPage);
    let currentPage = 1;


    function showPage(page) {
      const startIndex = (page - 1) * productsPerPage;
      const endIndex = startIndex + productsPerPage;

      products.forEach((product, index) => {
        if (index >= startIndex && index < endIndex) {
          product.style.display = "block";
        } else {
          product.style.display = "none";
        }
      });


      document.getElementById("prev-btn").style.display = page === 1 ? "none" : "block";
      document.getElementById("next-btn").style.display = page === totalPages ? "none" : "block";


      updatePageNumbers(page);
    }


    function updatePageNumbers(currentPage) {
      const paginationControls = document.getElementById("pagination-controls");

      const pageItems = document.querySelectorAll(".page-number");
      pageItems.forEach(item => item.remove());


      for (let i = 1; i <= totalPages; i++) {
        const pageItem = document.createElement("li");
        pageItem.classList.add("page-item");
        pageItem.classList.add("page-number");

        const pageLink = document.createElement("a");
        pageLink.classList.add("page-link");
        pageLink.href = "#";
        pageLink.textContent = i;

        if (i === currentPage) {
          pageLink.classList.add("active");
        }

        pageLink.addEventListener("click", function (e) {
          e.preventDefault();
          currentPage = i;
          showPage(currentPage);
        });

        pageItem.appendChild(pageLink);
        paginationControls.insertBefore(pageItem, document.getElementById("next-btn"));
      }
    }

    document.getElementById("prev-btn").addEventListener("click", function (e) {
      e.preventDefault();
      if (currentPage > 1) {
        currentPage--;
        showPage(currentPage);
      }
    });

    document.getElementById("next-btn").addEventListener("click", function (e) {
      e.preventDefault();
      if (currentPage < totalPages) {
        currentPage++;
        showPage(currentPage);
      }
    });


    showPage(currentPage);
  });
</script>


<script>
  document.addEventListener("DOMContentLoaded", () => {
  const products = JSON.parse(document.getElementById('products-data').textContent);
  let filteredProducts = [...products];
  let currentSort = 'newArrivals';
  let currentPage = 1;
  const productsPerPage = 20;

  // Initialize
  renderProducts();
  setupEventListeners();

function renderProducts() {
    const container = document.getElementById('products-container');
    const paginatedProducts = filteredProducts.slice(
        (currentPage - 1) * productsPerPage,
        currentPage * productsPerPage
    );

    container.innerHTML = paginatedProducts.map(product => `
        <div class="col-md-2 m-3">
                            <div class="card text-center" data-name="${product.name}" data-category="${product.category}">
                                <a href="/product-details/${product._id}">
                                    <img src="/uploads/${product.images}" class="card-img-top" alt="Product Image"
                                        style="width: 100%; height: 230px; object-fit: cover;">
                                </a>
                                <button type="button" class="btn-hover btncartbtm">Add to Cart</button>
                            </div>
                            <div class="card-body px-0">
                                <h6 class="card-title pt-2">${product.name} - ${product.size} ML </h6>
                                <!-- Product Name + Variant -->
                                <div class="d-flex justify-content-between align-items-center pe-4">
                                    <button type="button"
                                        class="btn btn-outline-secondary rounded-pill py-0 my-2 btnpill">${product.stock > 0 ? 'IN STOCK' : 'OUT OF STOCK'}</button>
                                    <p class="card-text text-muted">Rs. ${product.price}</p> <!-- Variant Price -->
                                </div>
                            </div>
                        </div>
    `).join('');

    updatePagination();
}

function updatePagination() {
    const totalPages = Math.ceil(filteredProducts.length / productsPerPage);
    const pagination = document.getElementById('pagination-controls');
    
    pagination.innerHTML = `
      <li class="page-item ${currentPage === 1 ? 'disabled' : ''}">
        <a class="page-link" href="#" data-page="prev">«</a>
      </li>
      ${Array.from({length: totalPages}, (_, i) => `
        <li class="page-item ${i + 1 === currentPage ? 'active' : ''}">
          <a class="page-link" href="#" data-page="${i + 1}">${i + 1}</a>
        </li>
      `).join('')}
      <li class="page-item ${currentPage === totalPages ? 'disabled' : ''}">
        <a class="page-link" href="#" data-page="next">»</a>
      </li>
    `;
  }
 /*  function handleWishlistClick(event) {
    const button = event.target.closest(".wishlist-btn");
    if (!button) return;

    const icon = button.querySelector("i");
    const productId = button.getAttribute("data-product");
    const variantId = button.getAttribute("data-variant");

    fetch("/wishlist/add-product", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ product_id: productId, variant_id: variantId }),
    })
    .then(response => response.json())
    .then(result => {
      Swal.fire({
        icon: result.success ? "success" : "error",
        title: result.message,
        confirmButtonText: "OK",
      });
      
      if (result.success) {
        icon.classList.toggle("bi-heart-fill");
        icon.classList.toggle("bi-heart");
        icon.style.color = result.message.includes("Added") ? "red" : "black";
      }
    })
    .catch(error => {
      console.error("Error updating wishlist:", error);
      Swal.fire({
        icon: "error",
        title: "Error",
        text: "Something went wrong! Please try again.",
        confirmButtonText: "OK",
      });
    });
  }

*/




  function handleSearch() {
    const searchQuery = document.getElementById('search-input').value.toLowerCase();
    const category = document.getElementById('category-filter').value;
    
       filteredProducts = products.filter(product => {
        const matchesSearch = product.name.toLowerCase().includes(searchQuery);
        const matchesCategory = category === "" || product.category._id === category;
        return matchesSearch && matchesCategory;
    });

    applySort(currentSort);
    currentPage = 1;
    renderProducts();
  }

  function applySort(sortType) {
    currentSort = sortType;
    
    switch(sortType) {
      case 'popularity':
        filteredProducts.sort((a, b) => b.popularity - a.popularity);
        break;
      case 'priceLowToHigh':
        filteredProducts.sort((a, b) => a.price - b.price);
        break;
      case 'priceHighToLow':
        filteredProducts.sort((a, b) => b.price - a.price);
        break;
      case 'averageRatings':
        filteredProducts.sort((a, b) => b.averageRating - a.averageRating);
        break;
      case 'featured':
        filteredProducts.sort((a, b) => b.featured - a.featured);
        break;
      case 'newArrivals':
        filteredProducts.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));
        break;
      case 'aToZ':
        filteredProducts.sort((a, b) => a.name.localeCompare(b.name));
        break;
      case 'zToA':
        filteredProducts.sort((a, b) => b.name.localeCompare(a.name));
        break;
    }
    
    renderProducts();
  }

  function setupEventListeners() {
    // Search and Filter
    document.getElementById('search-input').addEventListener('input', debounce(handleSearch, 300));
    document.getElementById('category-filter').addEventListener('change', handleSearch);

    document.getElementById('search-button').addEventListener('click', handleSearch);
  document.getElementById('products-container').addEventListener('click', handleWishlistClick);
    // Sorting
    document.querySelectorAll('.dropdown-item').forEach(item => {
      item.addEventListener('click', (e) => {
        e.preventDefault();
        const sortType = e.target.getAttribute('href').split('=')[1];
        applySort(sortType);
      });
    });

    // Pagination
     document.getElementById('pagination-controls').addEventListener('click', (e) => {
      e.preventDefault();
      if (e.target.tagName === 'A') {
        const page = e.target.dataset.page;
        if (page === 'prev' && currentPage > 1) currentPage--;
        else if (page === 'next' && currentPage < Math.ceil(filteredProducts.length / productsPerPage)) currentPage++;
        else if (!isNaN(page)) currentPage = parseInt(page);
        renderProducts();
      }
    });

    // Wishlist
    document.getElementById('products-container').addEventListener('click', async (e) => {
      if (e.target.closest('.wishlist-btn')) {
        const btn = e.target.closest('.wishlist-btn');
        // Add your wishlist logic here
      }
    });
  }

  function debounce(func, timeout = 300) {
    let timer;
    return (...args) => {
      clearTimeout(timer);
      timer = setTimeout(() => { func.apply(this, args); }, timeout);
    };
  }
});



renderProducts();
  setupEventListeners();
</script>
