<link rel="stylesheet" href="/styles/usersignup.css">

{{>header}}

<section>
    <div>
        <p class="text-center fs-2 fw-semibold pt-5">Signup</p>
    </div>

    <div class="signup-container">
        <button class="btn btn-google w-100 mb-3">
            <a href="/auth/google" class="link-underline-opacity-0 link-secondary">
                <img src="/images/google.webp" alt="Google Icon" style="width: 20px; height: 20px;" class="me-2">

                Sign up using Google</a>
        </button>
        <div class="text-center my-2 d-flex align-items-center">
            <hr class="flex-grow-1 border-secondary">
            <span class="mx-2 text-muted">OR</span>
            <hr class="flex-grow-1 border-secondary">
        </div>
        <form action="/signup" method="post" id="signupForm">
            {{#if succesMessage}}
            <input type="text" id="message" value="{{{successMessage}}}" name="message" hidden>
            {{/if}}
            {{#if errorMessage}}
            <input type="text" id="message" value="{{{errorMessage}}}" name="message" hidden>
            {{/if}}
            <div class="row">
                <div class="col-md-6 mb-3">
                    <label for="fname" class="form-label">First Name</label>
                    <input type="text" id="firstname" name="firstname" class="form-control">

                </div>
                <div class="col-md-6 mb-3">
                    <label for="lname" class="form-label">Last Name</label>
                    <input type="text" id="lastname" name="lastname" class="form-control">

                </div>
            </div>
            <div class="mb-3">
                <label for="email" class="form-label">Email</label>
                <input type="email" id="email" name="email" class="form-control">

            </div>
            <div class="mb-3">
                <label for="password" class="form-label">Password</label>
                <input type="password" id="password" name="password" class="form-control">

            </div>
            <div class="mb-3">
                <label for="confirmpassword" class="form-label">Confirm Password</label>
                <input type="password" id="confirmpassword" name="confirmpassword" class="form-control">

            </div>
            
            <div class="mb-3">
                <label for="refCode" class="form-label">Do you have a Refferal Code?</label>
                <input type="text" id="refCode" name="refferalCode" class="form-control">
            </div>

            <div class="form-footer text-start mb-4">
                By Creating An Account You Agree With Our <a href="#" class="link-secondary">Terms Of Service</a>, <a
                    href="#" class="link-secondary">Privacy Policy</a>.
            </div>

            <button type="submit" class="btn btn-primary w-100">Create Account</button>
            <p class="form-control border-0 text-center text-danger" id="signup"></p>

        </form>
        <p class="text-center mt-4">
            Already have an account? <a href="/login"
                class="link-secondary link-underline-opacity-0 link-underline-opacity-75-hover">Log in</a>
        </p>
    </div>
</section>

{{>footer}}



<script>

    document.getElementById("signupForm").addEventListener("submit", async function (event) {
        event.preventDefault(); // Prevent default form submission

        // Get form values
        const firstname = document.getElementById("firstname").value.trim();
        const lastname = document.getElementById("lastname").value.trim();
        const email = document.getElementById("email").value.trim();
        const password = document.getElementById("password").value.trim();
        const confirmpassword = document.getElementById("confirmpassword").value.trim();
        const referralCode = document.getElementById("refCode").value.trim();
        document.getElementById("signup")

        const requiredFields = ['firstname', 'lastname', 'email', 'password', 'confirmpassword']
        let isValid = true;
        // Validate required fields
        requiredFields.forEach(field => {
            const input = document.getElementById(field);
            if (!input.value.trim()) {
                isValid = false;
                input.classList.add('is-invalid'); // Adds red border for invalid fields
            } else {
                input.classList.remove('is-invalid'); // Removes red border if valid
            }
        });

        if (!isValid) {
            Swal.fire({
                icon: 'warning',
                title: 'Missing Fields',
                text: 'Please fill in all required fields.',
                confirmButtonColor: '#d33'
            });
            return;
        }

        // Validate fields one by one, showing an alert for each error
        /*if (!firstname) {
            return Swal.fire({ icon: "error", title: "Validation Error", text: "First name is required." });
        }

        if (!lastname) {
            return Swal.fire({ icon: "error", title: "Validation Error", text: "Last name is required." });
        }

        if (!email) {
            return Swal.fire({ icon: "error", title: "Validation Error", text: "Email is required." });
        }*/

        const emailPattern = /^[a-z0-9]+@[a-z]+\.[a-z]{2,3}$/;
        if (!emailPattern.test(email)) {
            return Swal.fire({ icon: "error", title: "Validation Error", text: "Invalid email format." });
        }

        /*if (!password) {
            return Swal.fire({ icon: "error", title: "Validation Error", text: "Password is required." });
        }*/


        const passwordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d).{6,}$/;

        if (!passwordRegex.test(password)) {
            return Swal.fire({
                icon: "error",
                title: "Weak Password",
                text: "Password must be at least 6 characters long and include at least one uppercase letter, one lowercase letter, and one number."
            });
        }

        /*if (!confirmpassword) {
            return Swal.fire({ icon: "error", title: "Validation Error", text: "Confirm Password is required." });
        }*/

        if (password !== confirmpassword) {
            return Swal.fire({ icon: "error", title: "Validation Error", text: "Passwords do not match." });
        }



        // Proceed with form submission if all validations pass
        /*Swal.fire({
            icon: "success",
            title: "Registration Successful",
            text: "You will receive an OTP for verification.",
        }); */

        // Send form data using Fetch API
        const formData = { firstname, lastname, email, password, confirmpassword, referralCode };

        try {
            document.getElementById("signup").innerHTML = "Please wait.."

            const response = await fetch("/signup", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify(formData)
            });

            const result = await response.json();

            if (!response.ok) {
                throw new Error(result.error || "Signup failed.");
            }

            await Swal.fire({
                icon: "success",
                title: "Signup Successful!",
                text: "Check your email for OTP.",
                timer: 2000, // Auto-close alert after 2 seconds
                showConfirmButton: false // Hide "OK" button
            })
            document.getElementById("signupForm").reset();
            window.location.href = "/otp"; // Redirect to OTP verification page


        } catch (error) {
            Swal.fire({
                icon: "error",
                title: "Error",
                text: error.message || "Something went wrong."
            });
        }
    });


</script>